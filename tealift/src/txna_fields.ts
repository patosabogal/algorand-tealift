/**
 * This information is generated by running the following snippet on
 * https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/
 *
 * ```js
 * {
 *     const map = (v, fn) => Array.prototype.map.call(v, fn)
 *     const rows = document.querySelector('#txna-f-i ~ div tbody').querySelectorAll('tr')
 *     const object =
 *         map(rows, v => v.querySelectorAll('td'))
 *         .map(v => map(v, v => v.innerText))
 *         .map(([index, name, type, _in, notes]) => ({index: parseInt(index), name, type, in: _in, notes}))
 *         .reduce((acc, v) => (acc[v.name] = v, acc), {})
 *     const text =
 *         JSON.stringify(object, null, 2)
 *         .replaceAll(/"([^"]+)":/g, "$1:")
 *         .replaceAll(/ *in: "", *\n/g, '')
 *         .replaceAll(/'/g, '\\\'')
 *         .replaceAll(/"/g, '\'')
 *     console.log(text)
 * }
 * ```
 */
export default {
	args: {
    index: 26,
    name: 'ApplicationArgs',
    type: '[]byte',
    in: 'v2',
    notes: 'Arguments passed to the application in the ApplicationCall transaction'
  },
  ApplicationArgs: {
    index: 26,
    name: 'ApplicationArgs',
    type: '[]byte',
    in: 'v2',
    notes: 'Arguments passed to the application in the ApplicationCall transaction'
  },
  Accounts: {
    index: 28,
    name: 'Accounts',
    type: '[]byte',
    in: 'v2',
    notes: 'Accounts listed in the ApplicationCall transaction'
  },
  Assets: {
    index: 48,
    name: 'Assets',
    type: 'uint64',
    in: 'v3',
    notes: 'Foreign Assets listed in the ApplicationCall transaction'
  },
  Applications: {
    index: 50,
    name: 'Applications',
    type: 'uint64',
    in: 'v3',
    notes: 'Foreign Apps listed in the ApplicationCall transaction'
  },
  Logs: {
    index: 58,
    name: 'Logs',
    type: '[]byte',
    in: 'v5',
    notes: 'Log messages emitted by an application call (only with itxn in v5). Application mode only'
  },
  ApprovalProgramPages: {
    index: 64,
    name: 'ApprovalProgramPages',
    type: '[]byte',
    in: 'v7',
    notes: 'Approval Program as an array of pages'
  },
  ClearStateProgramPages: {
    index: 66,
    name: 'ClearStateProgramPages',
    type: '[]byte',
    in: 'v7',
    notes: 'ClearState Program as an array of pages'
  }
} as const
